// Code generated by MockGen. DO NOT EDIT.
// Source: packages/database/crud_repository.go
//
// Generated by this command:
//
//	mockgen -source=packages/database/crud_repository.go -destination=services/users/mocks/crud_repository_interface_mock.go -package=mocks -write_generate_directive
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -source=packages/database/crud_repository.go -destination=services/users/mocks/crud_repository_interface_mock.go -package=mocks -write_generate_directive

// MockCrudRepositoryInterface is a mock of CrudRepositoryInterface interface.
type MockCrudRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCrudRepositoryInterfaceMockRecorder
}

// MockCrudRepositoryInterfaceMockRecorder is the mock recorder for MockCrudRepositoryInterface.
type MockCrudRepositoryInterfaceMockRecorder struct {
	mock *MockCrudRepositoryInterface
}

// NewMockCrudRepositoryInterface creates a new mock instance.
func NewMockCrudRepositoryInterface(ctrl *gomock.Controller) *MockCrudRepositoryInterface {
	mock := &MockCrudRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCrudRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrudRepositoryInterface) EXPECT() *MockCrudRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockCrudRepositoryInterface) CreateOne(ctx context.Context, collection string, structure any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, collection, structure)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockCrudRepositoryInterfaceMockRecorder) CreateOne(ctx, collection, structure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockCrudRepositoryInterface)(nil).CreateOne), ctx, collection, structure)
}

// DeleteById mocks base method.
func (m *MockCrudRepositoryInterface) DeleteById(ctx context.Context, collection, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, collection, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockCrudRepositoryInterfaceMockRecorder) DeleteById(ctx, collection, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockCrudRepositoryInterface)(nil).DeleteById), ctx, collection, id)
}

// GetByEmail mocks base method.
func (m *MockCrudRepositoryInterface) GetByEmail(collection, email string, structure any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", collection, email, structure)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockCrudRepositoryInterfaceMockRecorder) GetByEmail(collection, email, structure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockCrudRepositoryInterface)(nil).GetByEmail), collection, email, structure)
}

// GetById mocks base method.
func (m *MockCrudRepositoryInterface) GetById(ctx context.Context, collection, id string, structure any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, collection, id, structure)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockCrudRepositoryInterfaceMockRecorder) GetById(ctx, collection, id, structure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCrudRepositoryInterface)(nil).GetById), ctx, collection, id, structure)
}

// GetPaginated mocks base method.
func (m *MockCrudRepositoryInterface) GetPaginated(ctx context.Context, collection string, page, perPage int, filters map[string]any, projections, sortings map[string]int, structures any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginated", ctx, collection, page, perPage, filters, projections, sortings, structures)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPaginated indicates an expected call of GetPaginated.
func (mr *MockCrudRepositoryInterfaceMockRecorder) GetPaginated(ctx, collection, page, perPage, filters, projections, sortings, structures any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginated", reflect.TypeOf((*MockCrudRepositoryInterface)(nil).GetPaginated), ctx, collection, page, perPage, filters, projections, sortings, structures)
}

// UpdateById mocks base method.
func (m *MockCrudRepositoryInterface) UpdateById(ctx context.Context, collection, id string, structure any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, collection, id, structure)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockCrudRepositoryInterfaceMockRecorder) UpdateById(ctx, collection, id, structure any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockCrudRepositoryInterface)(nil).UpdateById), ctx, collection, id, structure)
}

// MockPaginatedOutput is a mock of PaginatedOutput interface.
type MockPaginatedOutput struct {
	ctrl     *gomock.Controller
	recorder *MockPaginatedOutputMockRecorder
}

// MockPaginatedOutputMockRecorder is the mock recorder for MockPaginatedOutput.
type MockPaginatedOutputMockRecorder struct {
	mock *MockPaginatedOutput
}

// NewMockPaginatedOutput creates a new mock instance.
func NewMockPaginatedOutput(ctrl *gomock.Controller) *MockPaginatedOutput {
	mock := &MockPaginatedOutput{ctrl: ctrl}
	mock.recorder = &MockPaginatedOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaginatedOutput) EXPECT() *MockPaginatedOutputMockRecorder {
	return m.recorder
}
