// Code generated by MockGen. DO NOT EDIT.
// Source: encryption.go
//
// Generated by this command:
//
//	mockgen --source=encryption.go --destination=./mocks/encryption_interface_mock.go --package=encryption_mocks
//

// Package encryption_mocks is a generated GoMock package.
package encryption_mocks

import (
	context "context"
	reflect "reflect"

	encryption "github.com/italoservio/braz_ecommerce/packages/encryption"
	gomock "go.uber.org/mock/gomock"
)

// MockEncryptionInterface is a mock of EncryptionInterface interface.
type MockEncryptionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionInterfaceMockRecorder
}

// MockEncryptionInterfaceMockRecorder is the mock recorder for MockEncryptionInterface.
type MockEncryptionInterfaceMockRecorder struct {
	mock *MockEncryptionInterface
}

// NewMockEncryptionInterface creates a new mock instance.
func NewMockEncryptionInterface(ctrl *gomock.Controller) *MockEncryptionInterface {
	mock := &MockEncryptionInterface{ctrl: ctrl}
	mock.recorder = &MockEncryptionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptionInterface) EXPECT() *MockEncryptionInterfaceMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockEncryptionInterface) Encrypt(ctx context.Context, secret, text string) (*encryption.EncryptedText, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", ctx, secret, text)
	ret0, _ := ret[0].(*encryption.EncryptedText)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptionInterfaceMockRecorder) Encrypt(ctx, secret, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptionInterface)(nil).Encrypt), ctx, secret, text)
}
